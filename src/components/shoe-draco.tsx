'use client';
/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 ./public/assets/3d-models/shoe-draco.glb
*/

import { useGLTF } from '@react-three/drei';
import { GroupProps, ThreeEvent } from '@react-three/fiber';
import { useEffect, useState } from 'react';
import { proxy } from 'valtio';
import { useProxy } from 'valtio/utils';
import { HexAlphaColorPicker } from 'react-colorful';
import { Mesh } from 'three';

const state = proxy({
  current: null,
  items: {
    laces: '#1b1b1b',
    mesh: '#1b1b1b',
    caps: '#050505',
    inner: '#1b1b1b',
    sole: '#222222',
    stripes: '#f01010',
    band: '#f01010',
    patch: '#f01010',
  },
});

export function Shoe(props: GroupProps) {
  const { nodes, materials } = useGLTF(
    '/assets/3d-models/shoe-draco.glb'
  ) as any;
  const snap = useProxy(state);
  const [hovered, setHovered] = useState('');

  useEffect(() => {
    const cursor = `<svg width="64" height="64" fill="none" xmlns="http://www.w3.org/2000/svg"><g clip-path="url(#clip0)"><path fill="rgba(255, 255, 255, 0.5)" d="M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z" stroke="#000"/><g filter="url(#filter0_d)"><path d="M29.5 47C39.165 47 47 39.165 47 29.5S39.165 12 29.5 12 12 19.835 12 29.5 19.835 47 29.5 47z" fill="${
      snap.items[hovered as keyof typeof state.current]
    }"/></g><path d="M2 2l11 2.947L4.947 13 2 2z" fill="#000"/><text fill="#000" style="white-space:pre" font-family="Inter var, sans-serif" font-size="10" letter-spacing="-.01em"><tspan x="35" y="63">${hovered}</tspan></text></g><defs><clipPath id="clip0"><path fill="#fff" d="M0 0h64v64H0z"/></clipPath><filter id="filter0_d" x="6" y="8" width="47" height="47" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB"><feFlood flood-opacity="0" result="BackgroundImageFix"/><feColorMatrix in="SourceAlpha" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"/><feOffset dy="2"/><feGaussianBlur stdDeviation="3"/><feColorMatrix values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0"/><feBlend in2="BackgroundImageFix" result="effect1_dropShadow"/><feBlend in="SourceGraphic" in2="effect1_dropShadow" result="shape"/></filter></defs></svg>`;
    const auto = `<svg width="64" height="64" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill="rgba(255, 255, 255, 0.5)" d="M29.5 54C43.031 54 54 43.031 54 29.5S43.031 5 29.5 5 5 15.969 5 29.5 15.969 54 29.5 54z" stroke="#000"/><path d="M2 2l11 2.947L4.947 13 2 2z" fill="#000"/></svg>`;
    document.body.style.cursor = `url('data:image/svg+xml;base64,${Buffer.from(
      hovered ? cursor : auto
    ).toString('base64')}'), auto`;
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [hovered]);

  const onPointerOver = (event: ThreeEvent<PointerEvent>) => {
    event.stopPropagation();
    if (event.object instanceof Mesh) {
      setHovered(event.object.material.name);
    }
  };

  const onPointerOut = (event: ThreeEvent<PointerEvent>) => {
    if (event.intersections.length === 0) {
      setHovered('');
    }
  };

  const onPointerDown = (event: ThreeEvent<PointerEvent>) => {
    event.stopPropagation();
    if (event.object instanceof Mesh) {
      state.current = event.object.material.name;
    }
  };

  const onPointerMissed = (event: MouseEvent) => {
    event.stopPropagation();
    state.current = null;
  };

  return (
    <group
      {...props}
      dispose={null}
      onPointerOver={onPointerOver}
      onPointerOut={onPointerOut}
      onPointerDown={onPointerDown}
      onPointerMissed={onPointerMissed}
    >
      <mesh
        material-color={snap.items.laces}
        geometry={nodes.shoe.geometry}
        material={materials.laces}
      />
      <mesh
        material-color={snap.items.mesh}
        geometry={nodes.shoe_1.geometry}
        material={materials.mesh}
      />
      <mesh
        material-color={snap.items.caps}
        geometry={nodes.shoe_2.geometry}
        material={materials.caps}
      />
      <mesh
        material-color={snap.items.inner}
        geometry={nodes.shoe_3.geometry}
        material={materials.inner}
      />
      <mesh
        material-color={snap.items.sole}
        geometry={nodes.shoe_4.geometry}
        material={materials.sole}
      />
      <mesh
        material-color={snap.items.stripes}
        geometry={nodes.shoe_5.geometry}
        material={materials.stripes}
      />
      <mesh
        material-color={snap.items.band}
        geometry={nodes.shoe_6.geometry}
        material={materials.band}
      />
      <mesh
        material-color={snap.items.patch}
        geometry={nodes.shoe_7.geometry}
        material={materials.patch}
      />
    </group>
  );
}

export function Picker() {
  const snap = useProxy(state);

  const onChange = (color: string) => {
    if (snap.current) {
      state.items[snap.current as keyof typeof state.items] = color;
    }
  };

  return (
    snap.current && (
      <div className="absolute top-10 left-10">
        <h1 className="text-slate-800 font-bold text-3xl">{snap.current}</h1>
        <HexAlphaColorPicker
          onChange={onChange}
          color={snap.items[snap.current]}
        />
      </div>
    )
  );
}
